AWSTemplateFormatVersion: '2010-09-09'
Description: Vorlage zur Bereitstellung einer EC2-Instanz mit Elastic IP, Git, Apache und NVM in eu-central-1

Parameters:
  KeyName:
    Description: Name eines vorhandenen EC2-Schluesselpaares fuer den SSH-Zugriff
    Type: AWS::EC2::KeyPair::KeyName
    Default: EventAufgabenPlaner
    ConstraintDescription: Muss der Name eines bestehenden EC2-Schluesselpaares sein.
  InstanceType:
    Description: EC2-Instanztyp
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: Muss einen gueltigen EC2-Instanztyp angeben.
  SSHLocation:
    Description: Die IP-Adresse, die SSH-Zugriff auf die EC2-Instanz erhält.
    Type: String
    Default: 0.0.0.0/0
    ConstraintDescription: Muss eine gueltige CIDR-Notation sein.

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: ami-0e6a13e7a5b66ff4d  # Amazon Linux 2 AMI-ID fuer eu-central-1
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: EventAufgabenPlaner-Instance-Test
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Updates und Installation von Apache, Git und anderen Abhängigkeiten
          sudo yum update -y
          sudo yum install -y httpd git

          # Apache starten und aktivieren
          systemctl start httpd
          systemctl enable httpd

          # NVM installieren
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
          sleep 2
          export NVM_DIR="$HOME/.nvm"
          sleep 2
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # NVM laden

          sleep 2
          # Node.js installieren mit NVM
          su ec2-user -l -c "nvm install 16"

          # Git-Repository klonen
          su ec2-user -l -c "git clone https://github.com/alexanderkutzer/praxisprojekt-EventAufgabenPlaner.git ~/praxisprojekt-EventAufgabenPlaner"

          # In das Projektverzeichnis navigieren und die Anwendung starten
          cd /home/ec2-user/praxisprojekt-EventAufgabenPlaner/app/view     
          sleep 1   
          npm install
          sleep 5
          npm run build


          # Inhalt aus dist-Ordner in Apache Webverzeichnis kopieren
          cd /home/ec2-user/praxisprojekt-EventAufgabenPlaner/app/view/dist/
          sleep 1
          sudo cp -r * /var/www/html

          # API starten
          cd /home/ec2-user/praxisprojekt-EventAufgabenPlaner/app/api
          sleep 1
          npm install
          sleep 5
          npm run start




  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Sicherheitsgruppe fuer EC2-Instanz
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EventAufgabenPlaner-SG

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EC2Instance

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: EventAufgabenPlaner-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: EventAufgabenPlaner-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: EventAufgabenPlaner-PublicSubnet

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: EventAufgabenPlaner-RouteTable

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

Outputs:
  InstancePublicIP:
    Description: Oeffentliche IP-Adresse der EC2-Instanz
    Value: !Ref ElasticIP

  InstancePublicDNS:
    Description: OEffentlicher DNS-Name der EC2-Instanz
    Value: !GetAtt EC2Instance.PublicDnsName

  WebURL:
    Description: URL der Anwendung
    Value: !Sub "http://${ElasticIP}"

